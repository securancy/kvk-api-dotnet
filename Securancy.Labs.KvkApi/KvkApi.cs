//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Securancy.Labs.KvkApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBasisprofielKvkApiClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een specifiek bedrijf basisinformatie opvragen.
        /// </summary>
        /// <param name="kvkNummer">Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Basisprofiel> GetBasisprofielByKvkNummerAsync(string kvkNummer, bool? geoData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een specifiek bedrijf eigenaar informatie opvragen.
        /// </summary>
        /// <param name="kvkNummer">Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Eigenaar> GetEigenaarAsync(string kvkNummer, bool? geoData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een specifiek bedrijf hoofdvestigingsinformatie opvragen.
        /// </summary>
        /// <param name="kvkNummer">Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Vestiging> GetHoofdvestigingAsync(string kvkNummer, bool? geoData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een specifiek bedrijf een lijst met vestigingen opvragen.
        /// </summary>
        /// <param name="kvkNummer">Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VestigingList> GetVestigingenAsync(string kvkNummer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BasisprofielKvkApiClient : KvkApiBaseClient, IBasisprofielKvkApiClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public BasisprofielKvkApiClient(KvkApiClientConfig configuration, System.Net.Http.HttpClient httpClient) : base(configuration)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een specifiek bedrijf basisinformatie opvragen.
        /// </summary>
        /// <param name="kvkNummer">Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Basisprofiel> GetBasisprofielByKvkNummerAsync(string kvkNummer, bool? geoData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (kvkNummer == null)
                throw new System.ArgumentNullException("kvkNummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/basisprofielen/{kvkNummer}?");
            urlBuilder_.Replace("{kvkNummer}", System.Uri.EscapeDataString(ConvertToString(kvkNummer, System.Globalization.CultureInfo.InvariantCulture)));
            if (geoData != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geoData") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geoData, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Basisprofiel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Basisprofiel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Basisprofiel>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Basisprofiel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Basisprofiel>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een specifiek bedrijf eigenaar informatie opvragen.
        /// </summary>
        /// <param name="kvkNummer">Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Eigenaar> GetEigenaarAsync(string kvkNummer, bool? geoData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (kvkNummer == null)
                throw new System.ArgumentNullException("kvkNummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/basisprofielen/{kvkNummer}/eigenaar?");
            urlBuilder_.Replace("{kvkNummer}", System.Uri.EscapeDataString(ConvertToString(kvkNummer, System.Globalization.CultureInfo.InvariantCulture)));
            if (geoData != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geoData") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geoData, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Eigenaar>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Eigenaar>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Eigenaar>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Eigenaar>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Eigenaar>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een specifiek bedrijf hoofdvestigingsinformatie opvragen.
        /// </summary>
        /// <param name="kvkNummer">Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Vestiging> GetHoofdvestigingAsync(string kvkNummer, bool? geoData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (kvkNummer == null)
                throw new System.ArgumentNullException("kvkNummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/basisprofielen/{kvkNummer}/hoofdvestiging?");
            urlBuilder_.Replace("{kvkNummer}", System.Uri.EscapeDataString(ConvertToString(kvkNummer, System.Globalization.CultureInfo.InvariantCulture)));
            if (geoData != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geoData") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geoData, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Vestiging>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Vestiging>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Vestiging>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Vestiging>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Vestiging>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een specifiek bedrijf een lijst met vestigingen opvragen.
        /// </summary>
        /// <param name="kvkNummer">Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VestigingList> GetVestigingenAsync(string kvkNummer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (kvkNummer == null)
                throw new System.ArgumentNullException("kvkNummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/basisprofielen/{kvkNummer}/vestigingen");
            urlBuilder_.Replace("{kvkNummer}", System.Uri.EscapeDataString(ConvertToString(kvkNummer, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VestigingList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VestigingList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<VestigingList>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VestigingList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<VestigingList>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IZoekenKvkApiClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een bedrijf zoeken naar basisinformatie.
        /// </summary>
        /// <param name="kvkNummer">Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers</param>
        /// <param name="rsin">Rechtspersonen Samenwerkingsverbanden Informatie Nummer</param>
        /// <param name="vestigingsnummer">Vestigingsnummer: uniek nummer dat bestaat uit 12 cijfers</param>
        /// <param name="handelsnaam">De naam waaronder een vestiging of rechtspersoon handelt</param>
        /// <param name="postcode">Mag alleen in combinatie met Huisnummer gezocht worden</param>
        /// <param name="huisnummer">Mag alleen in combinatie met Postcode gezocht worden</param>
        /// <param name="type">Filter op type: hoofdvestiging, nevenvestiging en/of rechtspersoon</param>
        /// <param name="inclusiefInactieveRegistraties">Inclusief inactieve registraties: true, false</param>
        /// <param name="pagina">Paginanummer, minimaal 1 en maximaal 1000</param>
        /// <param name="aantal">Kies het aantal resultaten per pagina, minimaal 1 en maximaal 100</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Resultaat> GetResultsAsync(string kvkNummer = null, string rsin = null, string vestigingsnummer = null, string handelsnaam = null, string straatnaam = null, string plaats = null, string postcode = null, string huisnummer = null, string type = null, bool? inclusiefInactieveRegistraties = null, double? pagina = null, double? aantal = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ZoekenKvkApiClient : KvkApiBaseClient, IZoekenKvkApiClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public ZoekenKvkApiClient(KvkApiClientConfig configuration, System.Net.Http.HttpClient httpClient) : base(configuration)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een bedrijf zoeken naar basisinformatie.
        /// </summary>
        /// <param name="kvkNummer">Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers</param>
        /// <param name="rsin">Rechtspersonen Samenwerkingsverbanden Informatie Nummer</param>
        /// <param name="vestigingsnummer">Vestigingsnummer: uniek nummer dat bestaat uit 12 cijfers</param>
        /// <param name="handelsnaam">De naam waaronder een vestiging of rechtspersoon handelt</param>
        /// <param name="postcode">Mag alleen in combinatie met Huisnummer gezocht worden</param>
        /// <param name="huisnummer">Mag alleen in combinatie met Postcode gezocht worden</param>
        /// <param name="type">Filter op type: hoofdvestiging, nevenvestiging en/of rechtspersoon</param>
        /// <param name="inclusiefInactieveRegistraties">Inclusief inactieve registraties: true, false</param>
        /// <param name="pagina">Paginanummer, minimaal 1 en maximaal 1000</param>
        /// <param name="aantal">Kies het aantal resultaten per pagina, minimaal 1 en maximaal 100</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Resultaat> GetResultsAsync(string kvkNummer = null, string rsin = null, string vestigingsnummer = null, string handelsnaam = null, string straatnaam = null, string plaats = null, string postcode = null, string huisnummer = null, string type = null, bool? inclusiefInactieveRegistraties = null, double? pagina = null, double? aantal = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/zoeken?");
            if (kvkNummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kvkNummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kvkNummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rsin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rsin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rsin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vestigingsnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vestigingsnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vestigingsnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (handelsnaam != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("handelsnaam") + "=").Append(System.Uri.EscapeDataString(ConvertToString(handelsnaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (straatnaam != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("straatnaam") + "=").Append(System.Uri.EscapeDataString(ConvertToString(straatnaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (plaats != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("plaats") + "=").Append(System.Uri.EscapeDataString(ConvertToString(plaats, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postcode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postcode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (huisnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("huisnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(huisnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inclusiefInactieveRegistraties != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("InclusiefInactieveRegistraties") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inclusiefInactieveRegistraties, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagina != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagina") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagina, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aantal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("aantal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aantal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Resultaat>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Resultaat>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Resultaat>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Resultaat>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Resultaat>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IVestigingsprofielKvkApiClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een specifieke vestiging informatie opvragen.
        /// </summary>
        /// <param name="vestigingsnummer">Vestigingsnummer: uniek nummer dat bestaat uit 12 cijfers</param>
        /// <param name="geoData">GeoData: (true/false) geef aan of BAG data opgehaald moet worden</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Vestiging> GetVestigingByVestigingsnummerAsync(string vestigingsnummer, bool? geoData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VestigingsprofielKvkApiClient : KvkApiBaseClient, IVestigingsprofielKvkApiClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public VestigingsprofielKvkApiClient(KvkApiClientConfig configuration, System.Net.Http.HttpClient httpClient) : base(configuration)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Voor een specifieke vestiging informatie opvragen.
        /// </summary>
        /// <param name="vestigingsnummer">Vestigingsnummer: uniek nummer dat bestaat uit 12 cijfers</param>
        /// <param name="geoData">GeoData: (true/false) geef aan of BAG data opgehaald moet worden</param>
        /// <returns>default response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Vestiging> GetVestigingByVestigingsnummerAsync(string vestigingsnummer, bool? geoData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (vestigingsnummer == null)
                throw new System.ArgumentNullException("vestigingsnummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/vestigingsprofielen/{vestigingsnummer}?");
            urlBuilder_.Replace("{vestigingsnummer}", System.Uri.EscapeDataString(ConvertToString(vestigingsnummer, System.Globalization.CultureInfo.InvariantCulture)));
            if (geoData != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geoData") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geoData, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/hal+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Vestiging>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Vestiging>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Vestiging>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Vestiging>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Vestiging>("default response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Adres
    {
        /// <summary>
        /// Correspondentieadres en/of bezoekadres
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Indicatie of het adres is afgeschermd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indAfgeschermd")]
        public string IndAfgeschermd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("volledigAdres")]
        public string VolledigAdres { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("straatnaam")]
        public string Straatnaam { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("huisnummer")]
        public int? Huisnummer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("huisnummerToevoeging")]
        public string HuisnummerToevoeging { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("huisletter")]
        public string Huisletter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("aanduidingBijHuisnummer")]
        public string AanduidingBijHuisnummer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toevoegingAdres")]
        public string ToevoegingAdres { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postcode")]
        public string Postcode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postbusnummer")]
        public int? Postbusnummer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("plaats")]
        public string Plaats { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("straatHuisnummer")]
        public string StraatHuisnummer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postcodeWoonplaats")]
        public string PostcodeWoonplaats { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("regio")]
        public string Regio { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("land")]
        public string Land { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("geoData")]
        public GeoData GeoData { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Basisprofiel
    {
        /// <summary>
        /// Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kvkNummer")]
        public string KvkNummer { get; set; }

        /// <summary>
        /// Hiermee geeft de onderneming aan geen ongevraagde reclame per post of verkoop aan de deur te willen ontvangen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indNonMailing")]
        public string IndNonMailing { get; set; }

        /// <summary>
        /// Naam onder Maatschappelijke Activiteit
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("naam")]
        public string Naam { get; set; }

        /// <summary>
        /// Registratiedatum onderneming in HR
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("formeleRegistratiedatum")]
        public string FormeleRegistratiedatum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("materieleRegistratie")]
        public MaterieleRegistratie MaterieleRegistratie { get; set; }

        /// <summary>
        /// Totaal aantal werkzame personen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totaalWerkzamePersonen")]
        public int? TotaalWerkzamePersonen { get; set; }

        /// <summary>
        /// De naam van de onderneming wanneer er statuten geregistreerd zijn.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statutaireNaam")]
        public string StatutaireNaam { get; set; }

        /// <summary>
        /// Alle namen waaronder een onderneming of vestiging handelt (op volgorde van registreren)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("handelsnamen")]
        public System.Collections.Generic.ICollection<Handelsnaam> Handelsnamen { get; set; }

        /// <summary>
        /// Code beschrijving van SBI activiteiten conform SBI 2008 (Standard Industrial Classification). Er wordt geen maximering toegepast in de resultaten. Zie ook KVK.nl/sbi
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sbiActiviteiten")]
        public System.Collections.Generic.ICollection<SBIActiviteit> SbiActiviteiten { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("links")]
        public System.Collections.Generic.ICollection<Link> Links { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_embedded")]
        public EmbeddedContainer _embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Eigenaar
    {
        /// <summary>
        /// Rechtspersonen Samenwerkingsverbanden Informatie Nummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rsin")]
        public string Rsin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rechtsvorm")]
        public string Rechtsvorm { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("uitgebreideRechtsvorm")]
        public string UitgebreideRechtsvorm { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("adressen")]
        public System.Collections.Generic.ICollection<Adres> Adressen { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("links")]
        public System.Collections.Generic.ICollection<Link> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmbeddedContainer
    {

        [System.Text.Json.Serialization.JsonPropertyName("hoofdvestiging")]
        public Vestiging Hoofdvestiging { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eigenaar")]
        public Eigenaar Eigenaar { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Basisregistratie Adressen en Gebouwen gegevens uit het kadaster
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoData
    {
        /// <summary>
        /// Unieke BAG id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresseerbaarObjectId")]
        public string AddresseerbaarObjectId { get; set; }

        /// <summary>
        /// Unieke BAG nummeraanduiding id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nummerAanduidingId")]
        public string NummerAanduidingId { get; set; }

        /// <summary>
        /// Lengtegraad
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gpsLatitude")]
        public double? GpsLatitude { get; set; }

        /// <summary>
        /// Breedtegraad
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gpsLongitude")]
        public double? GpsLongitude { get; set; }

        /// <summary>
        /// Rijksdriehoek X-coördinaat
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rijksdriehoekX")]
        public double? RijksdriehoekX { get; set; }

        /// <summary>
        /// Rijksdriehoek Y-coördinaat
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rijksdriehoekY")]
        public double? RijksdriehoekY { get; set; }

        /// <summary>
        /// Rijksdriehoek Z-coördinaat
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rijksdriehoekZ")]
        public double? RijksdriehoekZ { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Alle namen waaronder een onderneming of vestiging handelt (op volgorde van registreren)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Handelsnaam
    {

        [System.Text.Json.Serialization.JsonPropertyName("naam")]
        public string Naam { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("volgorde")]
        public int? Volgorde { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Link
    {

        [System.Text.Json.Serialization.JsonPropertyName("rel")]
        public string Rel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("href")]
        public string Href { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hreflang")]
        public string Hreflang { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("media")]
        public string Media { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deprecation")]
        public string Deprecation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("profile")]
        public string Profile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaterieleRegistratie
    {
        /// <summary>
        /// Startdatum onderneming
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("datumAanvang")]
        public string DatumAanvang { get; set; }

        /// <summary>
        /// Einddatum onderneming
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("datumEinde")]
        public string DatumEinde { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Code beschrijving van SBI activiteiten conform SBI 2008 (Standard Industrial Classification). Er wordt geen maximering toegepast in de resultaten. Zie ook KVK.nl/sbi
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SBIActiviteit
    {

        [System.Text.Json.Serialization.JsonPropertyName("sbiCode")]
        public string SbiCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sbiOmschrijving")]
        public string SbiOmschrijving { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("indHoofdactiviteit")]
        public string IndHoofdactiviteit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Vestiging
    {
        /// <summary>
        /// Vestigingsnummer: uniek nummer dat bestaat uit 12 cijfers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vestigingsnummer")]
        public string Vestigingsnummer { get; set; }

        /// <summary>
        /// Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kvkNummer")]
        public string KvkNummer { get; set; }

        /// <summary>
        /// Rechtspersonen Samenwerkingsverbanden Informatie Nummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rsin")]
        public string Rsin { get; set; }

        /// <summary>
        /// Hiermee geeft de onderneming aan geen ongevraagde reclame per post of verkoop aan de deur te willen ontvangen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indNonMailing")]
        public string IndNonMailing { get; set; }

        /// <summary>
        /// Registratiedatum onderneming in HR
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("formeleRegistratiedatum")]
        public string FormeleRegistratiedatum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("materieleRegistratie")]
        public MaterieleRegistratie MaterieleRegistratie { get; set; }

        /// <summary>
        /// De naam waaronder een onderneming of vestiging handelt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eersteHandelsnaam")]
        public string EersteHandelsnaam { get; set; }

        /// <summary>
        /// Hoofdvestiging (Ja/Nee)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indHoofdvestiging")]
        public string IndHoofdvestiging { get; set; }

        /// <summary>
        /// Commerciele vestiging  (Ja/Nee)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indCommercieleVestiging")]
        public string IndCommercieleVestiging { get; set; }

        /// <summary>
        /// Aantal voltijd werkzame personen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voltijdWerkzamePersonen")]
        public int? VoltijdWerkzamePersonen { get; set; }

        /// <summary>
        /// Totaal aantal werkzame personen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totaalWerkzamePersonen")]
        public int? TotaalWerkzamePersonen { get; set; }

        /// <summary>
        /// Aantal deeltijd werkzame personen
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deeltijdWerkzamePersonen")]
        public int? DeeltijdWerkzamePersonen { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("adressen")]
        public System.Collections.Generic.ICollection<Adres> Adressen { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("websites")]
        public System.Collections.Generic.ICollection<string> Websites { get; set; }

        /// <summary>
        /// Code beschrijving van SBI activiteiten conform SBI 2008 (Standard Industrial Classification). Er wordt geen maximering toegepast in de resultaten. Zie ook KVK.nl/sbi
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sbiActiviteiten")]
        public System.Collections.Generic.ICollection<SBIActiviteit> SbiActiviteiten { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("links")]
        public System.Collections.Generic.ICollection<Link> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VestigingBasis
    {
        /// <summary>
        /// Vestigingsnummer: uniek nummer dat bestaat uit 12 cijfers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vestigingsnummer")]
        public string Vestigingsnummer { get; set; }

        /// <summary>
        /// Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kvkNummer")]
        public string KvkNummer { get; set; }

        /// <summary>
        /// De naam waaronder een onderneming of vestiging handelt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eersteHandelsnaam")]
        public string EersteHandelsnaam { get; set; }

        /// <summary>
        /// Hoofdvestiging (Ja/Nee)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indHoofdvestiging")]
        public string IndHoofdvestiging { get; set; }

        /// <summary>
        /// Indicatie of het adres is afgeschermd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indAdresAfgeschermd")]
        public string IndAdresAfgeschermd { get; set; }

        /// <summary>
        /// Commerciele vestiging  (Ja/Nee)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indCommercieleVestiging")]
        public string IndCommercieleVestiging { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("volledigAdres")]
        public string VolledigAdres { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("links")]
        public System.Collections.Generic.ICollection<Link> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VestigingList
    {
        /// <summary>
        /// Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kvkNummer")]
        public string KvkNummer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("aantalCommercieleVestigingen")]
        public long? AantalCommercieleVestigingen { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("aantalNietCommercieleVestigingen")]
        public long? AantalNietCommercieleVestigingen { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totaalAantalVestigingen")]
        public long? TotaalAantalVestigingen { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("vestigingen")]
        public System.Collections.Generic.ICollection<VestigingBasis> Vestigingen { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("links")]
        public System.Collections.Generic.ICollection<Link> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resultaat
    {
        /// <summary>
        /// Geeft aan op welke pagina je bent. Start vanaf pagina 1
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pagina")]
        public int? Pagina { get; set; }

        /// <summary>
        /// Geeft het aantal zoek resultaten per pagina weer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("aantal")]
        public int? Aantal { get; set; }

        /// <summary>
        /// Totaal aantal zoekresultaten gevonden. De API Zoeken toont max. 1000 resultaten.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totaal")]
        public int? Totaal { get; set; }

        /// <summary>
        /// Link naar de vorige pagina indien beschikbaar
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vorige")]
        public string Vorige { get; set; }

        /// <summary>
        /// Link naar de volgende pagina indien beschikbaar
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("volgende")]
        public string Volgende { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resultaten")]
        public System.Collections.Generic.ICollection<ResultaatItem> Resultaten { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("links")]
        public System.Collections.Generic.ICollection<Link> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResultaatItem
    {
        /// <summary>
        /// Nederlands Kamer van Koophandel nummer: bestaat uit 8 cijfers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kvkNummer")]
        public string KvkNummer { get; set; }

        /// <summary>
        /// Rechtspersonen Samenwerkingsverbanden Informatie Nummer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rsin")]
        public string Rsin { get; set; }

        /// <summary>
        /// Vestigingsnummer: uniek nummer dat bestaat uit 12 cijfers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vestigingsnummer")]
        public string Vestigingsnummer { get; set; }

        /// <summary>
        /// De naam waaronder een vestiging of rechtspersoon handelt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("handelsnaam")]
        public string Handelsnaam { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("straatnaam")]
        public string Straatnaam { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("huisnummer")]
        public int? Huisnummer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("huisnummerToevoeging")]
        public string HuisnummerToevoeging { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postcode")]
        public string Postcode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("plaats")]
        public string Plaats { get; set; }

        /// <summary>
        /// hoofdvestiging/nevenvestiging/rechtspersoon
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Indicatie of inschrijving actief is
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actief")]
        public string Actief { get; set; }

        /// <summary>
        /// Bevat de vervallen handelsnaam of statutaire naam waar dit zoekresultaat mee gevonden is.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vervallenNaam")]
        public string VervallenNaam { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("links")]
        public System.Collections.Generic.ICollection<Link> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603